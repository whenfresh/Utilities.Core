namespace WhenFresh.Utilities.Core.Security.Cryptography
{
    using System;
    using System.ComponentModel;
    using System.Diagnostics.CodeAnalysis;
    using System.IO;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Security.Cryptography;
    using System.Text;
#if NET20 || NET35
    using System.Security.Permissions;
#endif

    /// <summary>
    /// Represents a hash generated by the MD5 algorithm.
    /// </summary>
    /// <remarks>
    /// <see href="http://wikipedia.org/wiki/MD5">MD5 Message-Digest Algorithm</see>
    /// </remarks>
    [ImmutableObject(true)]
    [Serializable]
    public struct MD5Hash : ISerializable,
                            IComparable,
                            IComparable<MD5Hash>,
                            IEquatable<MD5Hash>
    {
        public MD5Hash(byte[] value)
            : this()
        {
            Value = value;
        }

        private MD5Hash(SerializationInfo info,
                        StreamingContext context)
            : this()
        {
            Value = Convert.FromBase64String(info.GetString("_value"));
        }

        public static MD5Hash Null
        {
            get
            {
                return new MD5Hash();
            }
        }

        private byte[] Value { get; set; }

        public static bool operator ==(MD5Hash obj,
                                       MD5Hash comparand)
        {
            return obj.Equals(comparand);
        }

        public static bool operator >(MD5Hash operand1,
                                      MD5Hash operand2)
        {
            return 0 < Compare(operand1, operand2);
        }

        public static implicit operator string(MD5Hash value)
        {
            return value.ToString();
        }

        public static implicit operator MD5Hash(byte[] value)
        {
            return new MD5Hash(value);
        }

        public static bool operator !=(MD5Hash obj,
                                       MD5Hash comparand)
        {
            return !obj.Equals(comparand);
        }

        public static bool operator <(MD5Hash operand1,
                                      MD5Hash operand2)
        {
            return 0 > Compare(operand1, operand2);
        }

        public static int Compare(MD5Hash operand1,
                                  MD5Hash operand2)
        {
            return string.CompareOrdinal(operand1, operand2);
        }

        [SuppressMessage("Microsoft.Design", "CA1057:StringUriOverloadsCallSystemUriOverloads", Justification = "This is not a string URI.")]
        public static MD5Hash Compute(string content)
        {
            if (null == content)
            {
                throw new ArgumentNullException("content");
            }

            return Compute(content, Encoding.Default);
        }

        public static MD5Hash Compute(string content,
                                      Encoding encoding)
        {
            if (null == content)
            {
                throw new ArgumentNullException("content");
            }

            if (null == encoding)
            {
                throw new ArgumentNullException("encoding");
            }

            return Compute(encoding.GetBytes(content));
        }

        public static MD5Hash Compute(FileSystemInfo file)
        {
            if (null == file)
            {
                throw new ArgumentNullException("file");
            }

            using (Stream stream = File.Open(file.FullName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                return Compute(stream);
            }
        }

        public static MD5Hash Compute(Uri resource)
        {
            if (null == resource)
            {
                throw new ArgumentNullException("resource");
            }

            var request = (HttpWebRequest)WebRequest.Create(resource);

            using (var response = request.GetResponse())
            {
                return Compute(response.GetResponseStream());
            }
        }

        public static MD5Hash Compute(Stream content)
        {
            if (null == content)
            {
                throw new ArgumentNullException("content");
            }

            using (new StreamReader(content))
            {
                using (MD5 md5 = new MD5CryptoServiceProvider())
                {
                    return new MD5Hash(md5.ComputeHash(content));
                }
            }
        }

        public static MD5Hash Compute(byte[] content)
        {
            if (null == content)
            {
                throw new ArgumentNullException("content");
            }

            using (MD5 md5 = new MD5CryptoServiceProvider())
            {
                return new MD5Hash(md5.ComputeHash(content));
            }
        }

        public static bool Differ(FileSystemInfo operand1,
                                  FileSystemInfo operand2)
        {
            return !Same(operand1, operand2);
        }

        public static bool Same(FileSystemInfo operand1,
                                FileSystemInfo operand2)
        {
            return 0 == Compare(Compute(operand1), Compute(operand2));
        }

        public override bool Equals(object obj)
        {
            return !ReferenceEquals(null, obj) && Equals((MD5Hash)obj);
        }

        public override int GetHashCode()
        {
            return null == Value
                       ? 0
                       : ToString().GetHashCode();
        }

        public override string ToString()
        {
            return ReferenceEquals(Value, null)
                       ? string.Empty
                       : Convert.ToBase64String(Value);
        }

        public int CompareTo(object obj)
        {
            if (null == obj)
            {
                throw new ArgumentNullException("obj");
            }

            return CompareTo((MD5Hash)obj);
        }

        public int CompareTo(MD5Hash other)
        {
            return Compare(this, other);
        }

        public bool Equals(MD5Hash other)
        {
            return ToString() == other.ToString();
        }

#if NET20 || NET35
        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
#endif

        void ISerializable.GetObjectData(SerializationInfo info,
                                         StreamingContext context)
        {
            if (null == info)
            {
                throw new ArgumentNullException("info");
            }

            info.AddValue("_value", ToString());
        }
    }
}